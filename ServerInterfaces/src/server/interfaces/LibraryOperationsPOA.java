package server.interfaces;


/**
* server/interfaces/LibraryOperationsPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ServerInterfaces.idl
* Friday, March 8, 2019 1:13:06 PM IST
*/

public abstract class LibraryOperationsPOA extends org.omg.PortableServer.Servant
 implements server.interfaces.LibraryOperationsOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("userExists", new java.lang.Integer (0));
    _methods.put ("addItem", new java.lang.Integer (1));
    _methods.put ("removeItem", new java.lang.Integer (2));
    _methods.put ("listAvailableItems", new java.lang.Integer (3));
    _methods.put ("borrowItem", new java.lang.Integer (4));
    _methods.put ("findItem", new java.lang.Integer (5));
    _methods.put ("returnItem", new java.lang.Integer (6));
    _methods.put ("addToWaitingList", new java.lang.Integer (7));
    _methods.put ("addToWaitingListOverloaded", new java.lang.Integer (8));
    _methods.put ("exchangeItem", new java.lang.Integer (9));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // server/interfaces/LibraryOperations/userExists
       {
         String userId = in.read_string ();
         boolean $result = false;
         $result = this.userExists (userId);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  //Manager operations
       case 1:  // server/interfaces/LibraryOperations/addItem
       {
         try {
           String managerID = in.read_string ();
           String itemID = in.read_string ();
           String itemName = in.read_string ();
           int quantity = in.read_long ();
           boolean $result = false;
           $result = this.addItem (managerID, itemID, itemName, quantity);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (server.interfaces.GeneralException $ex) {
           out = $rh.createExceptionReply ();
           server.interfaces.GeneralExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // server/interfaces/LibraryOperations/removeItem
       {
         try {
           String managerID = in.read_string ();
           String itemID = in.read_string ();
           int quantity = in.read_long ();
           int $result = (int)0;
           $result = this.removeItem (managerID, itemID, quantity);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (server.interfaces.GeneralException $ex) {
           out = $rh.createExceptionReply ();
           server.interfaces.GeneralExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // server/interfaces/LibraryOperations/listAvailableItems
       {
         try {
           String managerID = in.read_string ();
           server.interfaces.Book $result[] = null;
           $result = this.listAvailableItems (managerID);
           out = $rh.createReply();
           server.interfaces.BooksHelper.write (out, $result);
         } catch (server.interfaces.GeneralException $ex) {
           out = $rh.createExceptionReply ();
           server.interfaces.GeneralExceptionHelper.write (out, $ex);
         }
         break;
       }


  //Student operations
       case 4:  // server/interfaces/LibraryOperations/borrowItem
       {
         try {
           String userID = in.read_string ();
           String itemID = in.read_string ();
           String numberOfDays = in.read_string ();
           int $result = (int)0;
           $result = this.borrowItem (userID, itemID, numberOfDays);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (server.interfaces.GeneralException $ex) {
           out = $rh.createExceptionReply ();
           server.interfaces.GeneralExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // server/interfaces/LibraryOperations/findItem
       {
         try {
           String userID = in.read_string ();
           String itemName = in.read_string ();
           server.interfaces.Book $result[] = null;
           $result = this.findItem (userID, itemName);
           out = $rh.createReply();
           server.interfaces.BooksHelper.write (out, $result);
         } catch (server.interfaces.GeneralException $ex) {
           out = $rh.createExceptionReply ();
           server.interfaces.GeneralExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // server/interfaces/LibraryOperations/returnItem
       {
         try {
           String userID = in.read_string ();
           String itemID = in.read_string ();
           boolean $result = false;
           $result = this.returnItem (userID, itemID);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (server.interfaces.GeneralException $ex) {
           out = $rh.createExceptionReply ();
           server.interfaces.GeneralExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 7:  // server/interfaces/LibraryOperations/addToWaitingList
       {
         try {
           String userID = in.read_string ();
           String itemID = in.read_string ();
           boolean $result = false;
           $result = this.addToWaitingList (userID, itemID);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (server.interfaces.GeneralException $ex) {
           out = $rh.createExceptionReply ();
           server.interfaces.GeneralExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 8:  // server/interfaces/LibraryOperations/addToWaitingListOverloaded
       {
         try {
           String userID = in.read_string ();
           String itemID = in.read_string ();
           String oldItemID = in.read_string ();
           boolean $result = false;
           $result = this.addToWaitingListOverloaded (userID, itemID, oldItemID);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (server.interfaces.GeneralException $ex) {
           out = $rh.createExceptionReply ();
           server.interfaces.GeneralExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 9:  // server/interfaces/LibraryOperations/exchangeItem
       {
         try {
           String userID = in.read_string ();
           String newItemID = in.read_string ();
           String oldItemID = in.read_string ();
           int $result = (int)0;
           $result = this.exchangeItem (userID, newItemID, oldItemID);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (server.interfaces.GeneralException $ex) {
           out = $rh.createExceptionReply ();
           server.interfaces.GeneralExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:server/interfaces/LibraryOperations:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public LibraryOperations _this() 
  {
    return LibraryOperationsHelper.narrow(
    super._this_object());
  }

  public LibraryOperations _this(org.omg.CORBA.ORB orb) 
  {
    return LibraryOperationsHelper.narrow(
    super._this_object(orb));
  }


} // class LibraryOperationsPOA
